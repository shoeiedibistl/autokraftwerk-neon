'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var babel = require('@babel/core');
var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var babel__default = /*#__PURE__*/_interopDefaultLegacy(babel);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

const esbuildPluginBabel = (options = {}) => ({
  name: "babel",
  setup(build) {
    const { filter = /.*/, namespace = "", config = {}, loader } = options;
    const resolveLoader = (args) => {
      if (typeof loader === "function") {
        return loader(args.path);
      }
      return loader;
    };
    const transformContents = async (args, contents) => {
      const babelOptions = babel__default["default"].loadOptions({
        filename: args.path,
        ...config,
        caller: {
          name: "esbuild-plugin-babel",
          supportsStaticESM: true
        }
      });
      if (!babelOptions) {
        return { contents, loader: resolveLoader(args) };
      }
      if (babelOptions.sourceMaps) {
        babelOptions.sourceFileName = path__default["default"].relative(process.cwd(), args.path);
      }
      return new Promise((resolve, reject) => {
        babel__default["default"].transform(contents, babelOptions, (error, result) => {
          error ? reject(error) : resolve({
            contents: result?.code ?? "",
            loader: resolveLoader(args)
          });
        });
      });
    };
    build.onLoad({ filter, namespace }, async (args) => {
      const contents = await fs__default["default"].promises.readFile(args.path, "utf8");
      return transformContents(args, contents);
    });
  }
});

const DEFAULT_FILTER = /\.jsx?$/;
const babelPlugin = ({ babelConfig = {}, filter = DEFAULT_FILTER, apply, loader } = {}) => {
  return {
    name: "babel-plugin",
    apply,
    enforce: "pre",
    config() {
      return {
        optimizeDeps: {
          esbuildOptions: {
            plugins: [
              esbuildPluginBabel({
                config: { ...babelConfig },
                filter,
                loader
              })
            ]
          }
        }
      };
    },
    transform(code, id) {
      const shouldTransform = filter.test(id);
      if (!shouldTransform)
        return;
      const { code: output, map } = babel__default["default"].transformSync(code, {
        filename: id,
        ...babelConfig
      }) ?? {};
      return {
        code: output ?? "",
        map
      };
    }
  };
};

exports["default"] = babelPlugin;
exports.esbuildPluginBabel = esbuildPluginBabel;
